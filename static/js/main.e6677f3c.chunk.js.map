{"version":3,"sources":["reducer.js","hooks.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","data","types","actions","payload","type","reducer","state","action","Object","objectSpread","fetchDataUrl","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","url","wrap","_context","prev","next","fetch","abrupt","sent","json","stop","_x","apply","this","arguments","dateFilter","date","Date","getTime","getIngredientsFilter","ingredientsTitles","title","indexOf","getTitle","dataUrls","recipes","ingredients","Recipe","_ref6","recipe","react_default","createElement","map","ingredient","App_Ingredient","key","Ingredient","_ref7","App","_useDataApi","initUrlMap","length","undefined","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","urlMap","setUrlMap","useEffect","_ref2","_callee2","dataArray","res","_context2","Promise","all","keys","reduce","acc","urlIndex","defineProperty","fetechData","useDataApi","_useDataApi2","_useDataApi2$","_useDataApi2$$data","_useDataApi2$$data$re","_useDataApi2$$data$re2","_useDataApi2$$data$in","_useDataApi2$$data$in2","doFetch","className","onClick","freshIngredients","filter","freshIngredientsTitles","bestIngredientsTitles","_ref3","bestRecipes","_ref4","every","otherRecipes","_ref5","concat","getFilteredRecipes","App_Recipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6677f3c.chunk.js","sourcesContent":["export const initialState = {\n  loading: false,\n  data: {}\n};\n\nconst types = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_DATA: \"SET_DATA\"\n};\n\nexport const actions = {\n  setLoading: payload => ({ type: types.SET_LOADING, payload }),\n  setData: payload => ({ type: types.SET_DATA, payload })\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_LOADING: {\n      const { payload: loading } = action;\n      return { ...state, loading };\n    }\n\n    case types.SET_DATA: {\n      const { payload: data } = action;\n      return { ...state, data };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { useState, useEffect, useReducer } from \"react\";\n\nimport { initialState, reducer, actions } from \"./reducer\";\n\nconst fetchDataUrl = async url => (await fetch(url)).json();\n\nexport const useDataApi = (initUrlMap = {}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [urlMap, setUrlMap] = useState(initUrlMap);\n  useEffect(() => {\n    const fetechData = async () => {\n      dispatch(actions.setLoading(true));\n      const dataArray = await Promise.all(\n        Object.keys(urlMap).map(key => fetchDataUrl(urlMap[key]))\n      );\n      const res = Object.keys(urlMap).reduce(\n        (acc, key, urlIndex) => ({\n          ...acc,\n          [key]: dataArray[urlIndex]\n        }),\n        state.data\n      );\n      dispatch(actions.setLoading(false));\n      dispatch(actions.setData(res));\n    };\n    fetechData();\n  }, [urlMap]);\n\n  return [state, setUrlMap];\n};\n","import React from \"react\";\n\nimport { useDataApi } from \"./hooks\";\nimport \"./App.css\";\n\nconst dateFilter = date => new Date(date).getTime() > new Date().getTime();\n\nconst getIngredientsFilter = ingredientsTitles => title =>\n  ingredientsTitles.indexOf(title) !== -1;\n\nconst getTitle = ({ title }) => title;\n\nconst getFilteredRecipes = (recipes, ingredients) => {\n  const freshIngredients = ingredients.filter(({ \"use-by\": date }) =>\n    dateFilter(date)\n  );\n\n  const freshIngredientsTitles = freshIngredients.map(getTitle);\n\n  const bestIngredientsTitles = freshIngredients\n    .filter(({ \"best-before\": date }) => dateFilter(date))\n    .map(getTitle);\n\n  const bestRecipes = recipes.filter(({ ingredients }) =>\n    ingredients.every(getIngredientsFilter(bestIngredientsTitles))\n  );\n\n  const otherRecipes = recipes.filter(\n    ({ ingredients }) =>\n      !ingredients.every(getIngredientsFilter(bestIngredientsTitles)) &&\n      ingredients.every(getIngredientsFilter(freshIngredientsTitles))\n  );\n\n  return bestRecipes.concat(otherRecipes);\n};\n\nconst dataUrls = {\n  recipes: \"https://www.mocky.io/v2/5c85f7a1340000e50f89bd6c\",\n  ingredients: \"https://www.mocky.io/v2/5cac82f1300000664f10368f\"\n};\n\nconst App = () => {\n  const [\n    {\n      data: {\n        recipes: { recipes = [] } = {},\n        ingredients: { ingredients = [] } = {}\n      },\n      loading\n    },\n    doFetch\n  ] = useDataApi();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : recipes.length === 0 ? (\n          <button type=\"button\" onClick={() => doFetch(dataUrls)}>\n            <h1>What's For Lunch?</h1>\n          </button>\n        ) : (\n          getFilteredRecipes(recipes, ingredients).map(recipe => (\n            <Recipe key={recipe.title} recipe={recipe} />\n          ))\n        )}\n      </header>\n    </div>\n  );\n};\n\nconst Recipe = ({ recipe }) => {\n  return (\n    <div>\n      <h1>{recipe.title}</h1>\n      <p>What you'll need:</p>\n      <ul>\n        {recipe.ingredients.map(ingredient => (\n          <Ingredient key={ingredient} title={ingredient} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Ingredient = ({ title }) => <li>{title}</li>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}