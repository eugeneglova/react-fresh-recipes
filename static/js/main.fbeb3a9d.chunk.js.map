{"version":3,"sources":["reducer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","recipes","ingredients","types","actions","payload","type","reducer","state","action","Object","objectSpread","fetchRecipes","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","fetch","abrupt","sent","json","stop","apply","this","arguments","fetchIngredients","_ref2","_callee2","_context2","dateFilter","date","Date","getTime","getIngredientsFilter","ingredientsTitles","title","indexOf","getTitle","_ref3","Recipe","_ref11","recipe","react_default","createElement","map","ingredient","App_Ingredient","key","Ingredient","_ref12","App","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","_ref8","_callee3","_ref9","_ref10","_context3","Promise","all","className","length","onClick","freshIngredients","filter","_ref4","freshIngredientsTitles","bestIngredientsTitles","_ref5","bestRecipes","_ref6","every","otherRecipes","_ref7","concat","getFilteredRecipes","App_Recipe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbeb3a9d.chunk.js","sourcesContent":["export const initialState = {\n  loading: false,\n  recipes: [],\n  ingredients: []\n};\n\nconst types = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_RECIPES: \"SET_RECIPES\",\n  SET_INGREDIENTS: \"SET_INGREDIENTS\"\n};\n\nexport const actions = {\n  setLoading: payload => ({ type: types.SET_LOADING, payload }),\n  setRecipes: payload => ({ type: types.SET_RECIPES, payload }),\n  setIngredients: payload => ({ type: types.SET_INGREDIENTS, payload })\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case types.SET_LOADING: {\n      const { payload: loading } = action;\n      return { ...state, loading };\n    }\n\n    case types.SET_RECIPES: {\n      const { payload: recipes } = action;\n      return { ...state, recipes };\n    }\n\n    case types.SET_INGREDIENTS: {\n      const { payload: ingredients } = action;\n      return { ...state, ingredients };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import React, { useReducer } from \"react\";\n\nimport { initialState, reducer, actions } from \"./reducer\";\nimport \"./App.css\";\n\nconst fetchRecipes = async () =>\n  (await fetch(\"https://www.mocky.io/v2/5c85f7a1340000e50f89bd6c\")).json();\n\nconst fetchIngredients = async () =>\n  (await fetch(\"https://www.mocky.io/v2/5cac82f1300000664f10368f\")).json();\n\nconst dateFilter = date => new Date(date).getTime() > new Date().getTime();\n\nconst getIngredientsFilter = ingredientsTitles => title =>\n  ingredientsTitles.indexOf(title) !== -1;\n\nconst getTitle = ({ title }) => title;\n\nconst getFilteredRecipes = (recipes, ingredients) => {\n  const freshIngredients = ingredients.filter(({ \"use-by\": date }) =>\n    dateFilter(date)\n  );\n\n  const freshIngredientsTitles = freshIngredients.map(getTitle);\n\n  const bestIngredientsTitles = freshIngredients\n    .filter(({ \"best-before\": date }) => dateFilter(date))\n    .map(getTitle);\n\n  const bestRecipes = recipes.filter(({ ingredients }) =>\n    ingredients.every(getIngredientsFilter(bestIngredientsTitles))\n  );\n\n  const otherRecipes = recipes.filter(\n    ({ ingredients }) =>\n      !ingredients.every(getIngredientsFilter(bestIngredientsTitles)) &&\n      ingredients.every(getIngredientsFilter(freshIngredientsTitles))\n  );\n\n  return bestRecipes.concat(otherRecipes);\n};\n\nconst App = () => {\n  const [{ recipes, ingredients }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  const fetch = async () => {\n    dispatch(actions.setLoading(true));\n    const [{ recipes }, { ingredients }] = await Promise.all([\n      fetchRecipes(),\n      fetchIngredients()\n    ]);\n    dispatch(actions.setRecipes(recipes));\n    dispatch(actions.setIngredients(ingredients));\n    dispatch(actions.setLoading(false));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {recipes.length === 0 ? (\n          <button type=\"button\" onClick={() => fetch()}>\n            What's For Lunch?\n          </button>\n        ) : (\n          getFilteredRecipes(recipes, ingredients).map(recipe => (\n            <Recipe key={recipe.title} recipe={recipe} />\n          ))\n        )}\n      </header>\n    </div>\n  );\n};\n\nconst Recipe = ({ recipe }) => {\n  return (\n    <div>\n      <h1>{recipe.title}</h1>\n      <p>What you need:</p>\n      <ul>\n        {recipe.ingredients.map(ingredient => (\n          <Ingredient key={ingredient} title={ingredient} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Ingredient = ({ title }) => <li>{title}</li>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}